// Code generated by reactGen. DO NOT EDIT.

package main

import "myitcv.io/react"

func (l *ListElemDef) ShouldComponentUpdateIntf(nextProps, prevState, nextState interface{}) bool {
	res := false

	{
		res = l.Props() != nextProps.(ListElemProps) || res
	}
	v := prevState.(ListElemState)
	res = !v.EqualsIntf(nextState) || res
	return res
}

// SetState is an auto-generated proxy proxy to update the state for the
// ListElem component.  SetState does not immediately mutate l.State()
// but creates a pending state transition.
func (l *ListElemDef) SetState(state ListElemState) {
	l.ComponentDef.SetState(state)
}

// State is an auto-generated proxy to return the current state in use for the
// render of the ListElem component
func (l *ListElemDef) State() ListElemState {
	return l.ComponentDef.State().(ListElemState)
}

// IsState is an auto-generated definition so that ListElemState implements
// the myitcv.io/react.State interface.
func (l ListElemState) IsState() {}

var _ react.State = ListElemState{}

// GetInitialStateIntf is an auto-generated proxy to GetInitialState
func (l *ListElemDef) GetInitialStateIntf() react.State {
	return l.GetInitialState()
}

func (l ListElemState) EqualsIntf(val interface{}) bool {
	return l.Equals(val.(ListElemState))
}

// Props is an auto-generated proxy to the current props of ListElem
func (l *ListElemDef) Props() ListElemProps {
	uprops := l.ComponentDef.Props()
	return uprops.(ListElemProps)
}

func (l ListElemProps) EqualsIntf(val interface{}) bool {
	return l == val.(ListElemProps)
}

var _ react.Equals = ListElemProps{}
