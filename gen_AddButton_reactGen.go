// Code generated by reactGen. DO NOT EDIT.

package main

import "myitcv.io/react"

func (a *AddButtonDef) ShouldComponentUpdateIntf(nextProps, prevState, nextState interface{}) bool {
	res := false

	{
		res = a.Props() != nextProps.(AddButtonProps) || res
	}
	v := prevState.(AddButtonState)
	res = !v.EqualsIntf(nextState) || res
	return res
}

// SetState is an auto-generated proxy proxy to update the state for the
// AddButton component.  SetState does not immediately mutate a.State()
// but creates a pending state transition.
func (a *AddButtonDef) SetState(state AddButtonState) {
	a.ComponentDef.SetState(state)
}

// State is an auto-generated proxy to return the current state in use for the
// render of the AddButton component
func (a *AddButtonDef) State() AddButtonState {
	return a.ComponentDef.State().(AddButtonState)
}

// IsState is an auto-generated definition so that AddButtonState implements
// the myitcv.io/react.State interface.
func (a AddButtonState) IsState() {}

var _ react.State = AddButtonState{}

// GetInitialStateIntf is an auto-generated proxy to GetInitialState
func (a *AddButtonDef) GetInitialStateIntf() react.State {
	return AddButtonState{}
}

func (a AddButtonState) EqualsIntf(val interface{}) bool {
	return a == val.(AddButtonState)
}

// Props is an auto-generated proxy to the current props of AddButton
func (a *AddButtonDef) Props() AddButtonProps {
	uprops := a.ComponentDef.Props()
	return uprops.(AddButtonProps)
}

func (a AddButtonProps) EqualsIntf(val interface{}) bool {
	return a == val.(AddButtonProps)
}

var _ react.Equals = AddButtonProps{}
