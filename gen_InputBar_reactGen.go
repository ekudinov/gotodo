// Code generated by reactGen. DO NOT EDIT.

package main

import "myitcv.io/react"

func (i *InputBarDef) ShouldComponentUpdateIntf(nextProps, prevState, nextState interface{}) bool {
	res := false

	{
		res = i.Props() != nextProps.(InputBarProps) || res
	}
	v := prevState.(InputBarState)
	res = !v.EqualsIntf(nextState) || res
	return res
}

// SetState is an auto-generated proxy proxy to update the state for the
// InputBar component.  SetState does not immediately mutate i.State()
// but creates a pending state transition.
func (i *InputBarDef) SetState(state InputBarState) {
	i.ComponentDef.SetState(state)
}

// State is an auto-generated proxy to return the current state in use for the
// render of the InputBar component
func (i *InputBarDef) State() InputBarState {
	return i.ComponentDef.State().(InputBarState)
}

// IsState is an auto-generated definition so that InputBarState implements
// the myitcv.io/react.State interface.
func (i InputBarState) IsState() {}

var _ react.State = InputBarState{}

// GetInitialStateIntf is an auto-generated proxy to GetInitialState
func (i *InputBarDef) GetInitialStateIntf() react.State {
	return InputBarState{}
}

func (i InputBarState) EqualsIntf(val interface{}) bool {
	return i == val.(InputBarState)
}

// Props is an auto-generated proxy to the current props of InputBar
func (i *InputBarDef) Props() InputBarProps {
	uprops := i.ComponentDef.Props()
	return uprops.(InputBarProps)
}

func (i InputBarProps) EqualsIntf(val interface{}) bool {
	return i == val.(InputBarProps)
}

var _ react.Equals = InputBarProps{}
