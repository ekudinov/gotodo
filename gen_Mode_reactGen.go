// Code generated by reactGen. DO NOT EDIT.

package main

import "myitcv.io/react"

func (m *ModeDef) ShouldComponentUpdateIntf(nextProps, prevState, nextState interface{}) bool {
	res := false

	{
		res = m.Props() != nextProps.(ModeProps) || res
	}
	v := prevState.(ModeState)
	res = !v.EqualsIntf(nextState) || res
	return res
}

// SetState is an auto-generated proxy proxy to update the state for the
// Mode component.  SetState does not immediately mutate m.State()
// but creates a pending state transition.
func (m *ModeDef) SetState(state ModeState) {
	m.ComponentDef.SetState(state)
}

// State is an auto-generated proxy to return the current state in use for the
// render of the Mode component
func (m *ModeDef) State() ModeState {
	return m.ComponentDef.State().(ModeState)
}

// IsState is an auto-generated definition so that ModeState implements
// the myitcv.io/react.State interface.
func (m ModeState) IsState() {}

var _ react.State = ModeState{}

// GetInitialStateIntf is an auto-generated proxy to GetInitialState
func (m *ModeDef) GetInitialStateIntf() react.State {
	return m.GetInitialState()
}

func (m ModeState) EqualsIntf(val interface{}) bool {
	return m == val.(ModeState)
}

// Props is an auto-generated proxy to the current props of Mode
func (m *ModeDef) Props() ModeProps {
	uprops := m.ComponentDef.Props()
	return uprops.(ModeProps)
}

func (m ModeProps) EqualsIntf(val interface{}) bool {
	return m == val.(ModeProps)
}

var _ react.Equals = ModeProps{}
