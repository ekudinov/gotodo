// Code generated by reactGen. DO NOT EDIT.

package main

import "myitcv.io/react"

func (s *SaveButtonDef) ShouldComponentUpdateIntf(nextProps, prevState, nextState interface{}) bool {
	res := false

	{
		res = s.Props() != nextProps.(SaveButtonProps) || res
	}
	v := prevState.(SaveButtonState)
	res = !v.EqualsIntf(nextState) || res
	return res
}

// SetState is an auto-generated proxy proxy to update the state for the
// SaveButton component.  SetState does not immediately mutate s.State()
// but creates a pending state transition.
func (s *SaveButtonDef) SetState(state SaveButtonState) {
	s.ComponentDef.SetState(state)
}

// State is an auto-generated proxy to return the current state in use for the
// render of the SaveButton component
func (s *SaveButtonDef) State() SaveButtonState {
	return s.ComponentDef.State().(SaveButtonState)
}

// IsState is an auto-generated definition so that SaveButtonState implements
// the myitcv.io/react.State interface.
func (s SaveButtonState) IsState() {}

var _ react.State = SaveButtonState{}

// GetInitialStateIntf is an auto-generated proxy to GetInitialState
func (s *SaveButtonDef) GetInitialStateIntf() react.State {
	return SaveButtonState{}
}

func (s SaveButtonState) EqualsIntf(val interface{}) bool {
	return s == val.(SaveButtonState)
}

// Props is an auto-generated proxy to the current props of SaveButton
func (s *SaveButtonDef) Props() SaveButtonProps {
	uprops := s.ComponentDef.Props()
	return uprops.(SaveButtonProps)
}

func (s SaveButtonProps) EqualsIntf(val interface{}) bool {
	return s == val.(SaveButtonProps)
}

var _ react.Equals = SaveButtonProps{}
